#!/usr/bin/env python3
"""
Demo setup script for the Portfolio CMS
Creates a default admin user and sample projects
"""

from app import create_app, db
from app.models import User, Project

def setup_demo_data():
    app = create_app()
    
    with app.app_context():
        # Create tables
        db.create_all()
        
        # Check if admin user already exists
        admin = User.query.filter_by(username='admin').first()
        if not admin:
            # Create admin user
            admin = User(username='admin')
            admin.set_password('admin123')  # Change this in production!
            db.session.add(admin)
            print("âœ“ Created admin user (username: admin, password: admin123)")
        else:
            print("âœ“ Admin user already exists")
        
        # Create guest user for demo purposes
        guest_user = User.query.filter_by(username='guest').first()
        if not guest_user:
            guest_user = User(
                username='guest',
                email='guest@portfolio.demo'
            )
            guest_user.set_password('guest123')
            db.session.add(guest_user)
            print("âœ“ Created guest user for demo mode")
        
        # Check if sample projects exist
        if Project.query.count() == 0:
            # Create sample projects
            projects = [
                {
                    'title': 'E-Commerce Website',
                    'description': '''A full-featured e-commerce platform built with Flask and SQLAlchemy. 
                    
Features include:
â€¢ User authentication and authorization
â€¢ Product catalog with search and filtering
â€¢ Shopping cart and checkout system
â€¢ Admin dashboard for inventory management
â€¢ Responsive design with Bootstrap
â€¢ Payment integration with Stripe
â€¢ Email notifications for orders

Technologies used: Python, Flask, SQLAlchemy, Bootstrap, JavaScript, Stripe API''',
                    'url': 'https://github.com/yourusername/ecommerce-flask',
                    'image': None
                },
                {
                    'title': 'Task Management App',
                    'description': '''A collaborative task management application similar to Trello, built with modern web technologies.

Key features:
â€¢ Drag-and-drop task boards
â€¢ Real-time collaboration
â€¢ User roles and permissions
â€¢ File attachments and comments
â€¢ Due date reminders
â€¢ Progress tracking and analytics
â€¢ Mobile-responsive interface

Built with Flask, Socket.IO for real-time features, and PostgreSQL for data persistence.''',
                    'url': 'https://github.com/yourusername/task-manager',
                    'image': None
                },
                {
                    'title': 'Weather Dashboard',
                    'description': '''An interactive weather dashboard that provides current conditions and forecasts for multiple cities.

Features:
â€¢ Current weather conditions
â€¢ 7-day weather forecast
â€¢ Interactive maps with weather overlays
â€¢ Location-based weather detection
â€¢ Weather alerts and notifications
â€¢ Historical weather data charts
â€¢ Favorite locations management

Integrates with OpenWeatherMap API and uses Chart.js for data visualization.''',
                    'url': 'https://weather-dashboard-demo.herokuapp.com',
                    'image': None
                },
                {
                    'title': 'Blog Platform',
                    'description': '''A modern blogging platform with content management capabilities and SEO optimization.

Core functionality:
â€¢ Rich text editor for content creation
â€¢ Category and tag management
â€¢ Comment system with moderation
â€¢ SEO-friendly URLs and meta tags
â€¢ Social media integration
â€¢ RSS feed generation
â€¢ Analytics dashboard
â€¢ Multi-author support

Built with Flask, CKEditor for rich text editing, and optimized for search engines.''',
                    'url': None,
                    'image': None
                }
            ]
            
            for project_data in projects:
                project_data['user_id'] = None  # Demo projects have no owner
                project = Project(**project_data)
                db.session.add(project)
            
            print(f"âœ“ Created {len(projects)} sample projects")
        else:
            print(f"âœ“ Found {Project.query.count()} existing projects")
        
        # Commit all changes
        db.session.commit()
        print("\nðŸŽ‰ Demo setup complete!")
        print("\nYou can now:")
        print("1. Run the app: python run.py")
        print("2. Visit: http://localhost:5000")
        print("3. Admin login: http://localhost:5000/admin/login")
        print("   Username: admin")
        print("   Password: admin123")

if __name__ == '__main__':
    setup_demo_data()